// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  ADMIN
  USER
}

model User {
  id                       Int       @id @unique @default(autoincrement())
  email                    String    @unique
  password                 String?
  firstName                String
  lastName                 String
  emailVerified            Boolean?
  evtolSerialNo            String?
  resetPasswordTokenExpiry DateTime? @default(now())
  otp                      String?
  otpExpiry                DateTime?
  googleId                 String?   @unique
  role                     ROLE      @default(USER)
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  evtolRequest      EvtolRequest[]
  loadedMedications LoadedMedication[]
}

model eVTOLDevice {
  id                Int      @id @unique @default(autoincrement())
  serialNo          String   @unique
  model             MODEL
  weightLimit       Float    @default(500.0)
  batteryCapacity   Float    @default(100.0)
  status            STATUS   @default(IDLE)
  distanceTravelled Float    @default(0.0)
  destination       String   @default("No Destination")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  requests       EvtolRequest[]
  batteryHistory BatteryHistory[]
  medications    Medication[]
}

model EvtolRequest {
  id            Int                @id @default(autoincrement())
  userId        Int
  evtolSerialNo String
  requestStatus EvtolRequestStatus @default(PENDING)
  createdAt     DateTime           @default(now())

  user  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  evtol eVTOLDevice @relation(fields: [evtolSerialNo], references: [serialNo], onDelete: Cascade)
}

model Medication {
  id             Int      @id @unique @default(autoincrement())
  name           String
  evtol_serialNo String?
  weight         Float
  code           String   @unique
  image          String
  price          Float    @default(350.0)
  description    String   @default("No Description")
  delivered      Boolean? @default(false)
  createdAt      DateTime @default(now())

  evtolDevice      eVTOLDevice[]
  loadedMedication LoadedMedication[]
}

model LoadedMedication {
  id       Int      @id @default(autoincrement())
  loadedAt DateTime @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  medicationId Int
  medication   Medication @relation(fields: [medicationId], references: [id], onDelete: Cascade)
}

model BatteryHistory {
  id             Int         @id @default(autoincrement())
  evtolDevice    eVTOLDevice @relation(fields: [evtol_serialNo], references: [serialNo], onDelete: Cascade, onUpdate: Cascade)
  evtol_serialNo String
  batteryLevel   Float
  createdAt      DateTime    @default(now())
}

enum MODEL {
  LIGHTWEIGHT
  MIDDLEWEIGHT
  CRUISERWEIGHT
  HEAVYWEIGHT
}

enum STATUS {
  IDLE
  LOADING
  LOADED
  DELIVERING
  DELIVERED
  RETURNING
}

enum EvtolRequestStatus {
  PENDING
  APPROVED
  DECLINED
}

enum Role {
  ADMIN
  USER
}
